#!/bin/bash
# v3 smartctl disk check

# LSI sat+megaraid,12 /dev/sda
# 3ware 3ware,1 and 9750 /dev/twl0, 9650 /dev/twa0

# reporting
# 5 Reallocated_Sector_Ct, 9 Power_On_Hours, 10 Spin_Retry_Count,
# 197 Current_Pending_Sector, 198 Offline_Uncorrectable
awkS='
/^  5 /{if ($10 > 0) printf "%d = %s ", $10, $2 }
/^ 10 /{if ($10 > 0) printf "%d = %s ", $10, $2 }
/^197 /{if ($10 > 0) printf "%d = %s ", $10, $2 }
/^198 /{if ($10 > 0) printf "%d = %s ", $10, $2 }
/^  9 /{x=$10/24/365; if (x > 4) printf "(%1.1f years) ", x }
'

# quickie
if [[ -n "$1" ]]; then
  echo "== $1"
  out=$( smartctl -d sat -A $1 | awk "$awkS" )
  if [[ -n $out ]]; then
    echo "$out SATA disk $1"
  fi
  exit
fi
  

# figure out disks
# smartctl --scan for AT disks, dmesg scsi# for raid controllers
# could use lsblk

# SATA or PATA
Sata=$( smartctl --scan-open | awk '/sat/{print $1}')

# RAID controllers
# drivers find cards during boot
Raid=$( 
cat /var/log/dmesg | egrep '^scsi[0-9]' | 
  while read scsi sep line; do
    case "$line" in
      (LSI*MegaRAID*) 
        # LSI so find an associated sd line
        echo 'sat+megaraid'
        # strip 'scsi' off front leaving digit
        sd=${scsi#scsi}
        disk=$( cat /var/log/dmesg | egrep "^sd $sd" | cut -f3 -d' ' )
        # strip off []
        echo "/dev/${disk:1:3}"
        ;;
      (3w-sas*) 
        # 9750
        echo 3ware
        echo /dev/twl$((x97++))
        ;;
      (3ware*) 
        # 9690 9650 9550
        echo 3ware
        echo /dev/twa$((x9X++))
        ;;
    esac
  done )

# hello
echo == smart: looking for sector errs on $( hostname )
if [[ -n "$Sata" ]]; then echo SATA $Sata; fi
if [[ -n "$Raid" ]]; then echo RAID $Raid; fi

## non-raid
for i in $Sata; do
  out=$( smartctl -d sat -A $i | awk "$awkS" )
  if [[ -n $out ]]; then
    echo "$out SATA disk $i"
  fi
done

## raid
if [[ -n "$Raid" ]]; then set $Raid; else exit; fi
# Type Rdev ...
while [[ $# > 0 ]]; do
  Type=$1; shift; Rdev=$1; shift
  for (( j=0; j<30; j++ )); do
    out=$( smartctl -d $Type,$j -A $Rdev | awk "$awkS" )
    if [[ -n "$out" ]]; then
      echo "$out on disk $Type,$j $Rdev"
    fi
  done
done


